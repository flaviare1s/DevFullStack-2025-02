package model; // Pacote da aplicação; ajuda a organizar o domínio (DDD) e controlar acesso.

/*
 * IMPORTAÇÕES JPA:
 * - @Entity: marca a classe como entidade persistente.
 * - @Id: identifica o campo/chave primária.
 * - @GeneratedValue: define como o ID é gerado (IDENTITY, SEQUENCE, TABLE, AUTO).
 * - @Column: customiza o mapeamento de uma propriedade para a coluna do banco.
 */
import javax.persistence.*;

/*
 * @Entity
 *  - Torna a classe "gerenciável" pelo provedor JPA (Hibernate).
 *  - Por padrão, o nome da tabela será o nome da classe (Cardapio) — sensível à
 *    estratégia de naming utilizada. Se quiser fixar, use @Table(name = "cardapio").
 *
 * Ex. (opcional):
 * @Table(name = "cardapio",
 *        indexes = {@Index(name = "idx_cardapio_nome", columnList = "nome")})
 */
@Entity
public class Cardapio { // POJO que representa uma linha na tabela (cada instância = um registro)

    /*
     * CHAVE PRIMÁRIA
     *  - @Id: marca o identificador único da entidade.
     *  - @GeneratedValue(strategy = GenerationType.IDENTITY):
     *      * Delega ao banco a geração do ID (auto-increment/identity).
     *      * Em PostgreSQL moderno, usa "GENERATED BY DEFAULT/ALWAYS AS IDENTITY".
     *      * Alternativa comum no PostgreSQL é @SequenceGenerator + SEQUENCE.
     *
     * NOME DA COLUNA:
     *  - Se quiser padronizar snake_case no DB, pode especificar:
     *    @Column(name = "id_cardapio")
     *  - Sem @Column(name=...), o nome é inferido (pode virar "id_cardapio"
     *    conforme estratégia de naming). Para evitar surpresa, é comum explicitar.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id_cardapio;

    /*
     * COLUNA "nome"
     *  - @Column(unique = true): cria uma UNIQUE constraint (e índice único) no banco.
     *  - Boa prática: também definir tamanho/nullable para refletir regra de negócio,
     *    por exemplo: @Column(name = "nome", length = 120, nullable = false, unique = true)
     */
    @Column(unique = true)
    private String nome;

    /*
     * COLUNA "descricao"
     *  - Sem @Column, o Hibernate infere o nome e as características padrão.
     *  - Se a descrição puder ser longa, considere @Lob (TEXT no PostgreSQL) ou length.
     *  - Ex.: @Column(length = 500) para limitar tamanho.
     */
    private String descricao;

    /*
     * COLUNA "preco_unitario"
     *  - Usar Double funciona, mas para valores monetários recomenda-se BigDecimal para
     *    evitar erros de ponto flutuante e controlar precisão/escala.
     *  - Ex.: @Column(precision = 10, scale = 2) com BigDecimal.
     *  - Caso mantenha Double, valide arredondamentos no nível de aplicação.
     */
    private Double preco_unitario;

    /*
     * CONSTRUTOR PADRÃO (OBRIGATÓRIO PARA JPA)
     *  - O provedor JPA precisa de um construtor sem argumentos para instanciar a entidade
     *    via reflexão/proxies.
     */
    public Cardapio() {}

    /*
     * (Opcional) CONSTRUTOR DE CONVENIÊNCIA
     *  - Útil para criar instâncias já preenchidas na camada de serviço/testes.
     *  - Não é obrigatório; deixe apenas se for ajudar no seu fluxo.
     */
    public Cardapio(String nome, String descricao, Double preco_unitario) {
        this.nome = nome;
        this.descricao = descricao;
        this.preco_unitario = preco_unitario;
    }

    // ============================= GETTERS/SETTERS =============================
    // A JPA usa os getters/setters (ou acesso por campo, conforme estratégia) para
    // ler/gravar valores entre o objeto e o banco de dados.

    public String getDescricao() { // Usado pelo Hibernate/serializer para acessar o valor
        return descricao;
    }

    public void setDescricao(String descricao) { // Permite mutar o campo antes do flush
        this.descricao = descricao;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        // Aqui é um bom lugar para normalizar/validar (ex.: trim, toUpperCase, regex)
        this.nome = nome;
    }

    public Long getId_cardapio() {
        return id_cardapio;
    }

    public void setId_cardapio(Long id_cardapio) {
        /*
         * Em muitos projetos, evita-se expor setter do ID para prevenir atribuição manual,
         * já que o valor é gerado pelo banco. Você pode remover este setter e manter
         * apenas o getter. Se ficar, use com cautela (ex.: em migrações/testes).
         */
        this.id_cardapio = id_cardapio;
    }

    public Double getPreco_unitario() {
        return preco_unitario;
    }

    public void setPreco_unitario(Double preco_unitario) {
        // Em valores financeiros, considere validar faixa mínima/máxima e casas decimais.
        this.preco_unitario = preco_unitario;
    }
}
